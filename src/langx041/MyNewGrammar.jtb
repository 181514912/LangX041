/**
 * JTB template file created by SF JavaCC plugin 1.5.28+ wizard for JTB 1.4.0.2+ and JavaCC 1.5.0+
 */
options
{
  static = false;
  JTB_P = "langx041";
  JDK_VERSION = "1.5"; // (default 1.5 - needs javacc.jar v4.x)
}

PARSER_BEGIN(MyNewGrammar)
package langx041;
import langx041.syntaxtree.*;
import langx041.visitor.*;
import langx041.interpreter.*;

public class MyNewGrammar
{
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "#" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
}

TOKEN : /* KEYWORDS */
{
  < REQUERE : "require" >
| < IF : "if" >
| < WHILE : "loop_if" >
| < DO : "do" >
| < STOP : "stop" >
| < DEF : "let" >
}

TOKEN : /* SYMBOLS */
{
  < DOT : "." >
| < COLON : "::" >
| < EQ : "==" >
| < GT : ">" >
| < LT : "<" >
| < GE : ">=" >
| < LE : "<=" >
| < NE : "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < MOD : "%" >
| < ASSIGN : "=" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    [ "1"-"9" ] ([ "0"-"9" ])*
  | "0" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

/* Grammar starts from here */

void Start() :
{}
{
  (
    Require() "."
  )+
  (
    StatementExpression()
  )*
}

void Require() :
{}
{
  "require" 
  (
  < IDENTIFIER >
  )+
}

/* Math Operations */
void MathExpression() :
{}
{
  AdditiveExpression()
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression()
  (
    (
      "+"
    | "-"
    )
    MultiplicativeExpression()
  )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression()
  (
    (
      "*"
    | "/"
    | "%"
    )
    UnaryExpression()
  )*
}

void UnaryExpression() :
{}
{
  "(" MathExpression() ")"
| < INTEGER_LITERAL >
| VariableName()
}

/* Relational Test */
void RelationalExpression() :
{}
{
  RelationalEqualityExpression()
}

void RelationalEqualityExpression() :
{}
{
  RelationalGreaterExpression()
  (
    (
      "=="
    | "!="
    )
    RelationalGreaterExpression()
  )*
}

void RelationalGreaterExpression() :
{}
{
  RelationalLessExpression()
  (
    (
      ">"
    | ">="
    )
    RelationalLessExpression()
  )*
}

void RelationalLessExpression() :
{}
{
  UnaryRelational()
  (
    (
      "<"
    | "<="
    )
    UnaryRelational()
  )*
}

void UnaryRelational() :
{}
{
	MathExpression()
}

void IfExpression() :
{}
{
  "if" RelationalExpression() "do"
  (
    StatementExpression()
  )*
  "stop"
}

void WhileExpression() :
{}
{
  "loop_if" RelationalExpression() "do"
  (
    StatementExpression()
  )*
  "stop"
}

void VariableDeclaration() :
{}
{
  "let" VariableName() "=" MathExpression() "."
}

/* variable declaration is done using "def" keyword */
void VariableAssign() :
{}
{
  VariableName() "=" MathExpression() "."
}

void VariableName() :
{}
{
  < IDENTIFIER >
}

/* ClassName:[Method|Members]( number ) e.g. System:out:println(4) */
/* changing dot by colon */
void JavaStaticMethods() :
{}
{
  < IDENTIFIER > 	/* Class Name */
  (
  "::" < IDENTIFIER > /* Member or Method */
  )+ 
  "(" MathExpression()
  (
    "," MathExpression()
  )*
  ")" "."
}

void StatementExpression() :
{}
{
  VariableDeclaration()
| LOOKAHEAD(2)
  VariableAssign()
| JavaStaticMethods()
| IfExpression()
| WhileExpression()
}
